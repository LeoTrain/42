import ctypes
from function_enum import Functions

functions_dick = {
    Functions.TOLOWER: {"real": "tolower", "ft": "ft_tolower", "parameters": [ctypes.c_int], "return_value": ctypes.c_int},
    Functions.TOUPPER: {"real": "toupper", "ft": "ft_toupper", "parameters": [ctypes.c_int], "return_value": ctypes.c_int},
    Functions.ISPRINT: {"real": "isprint", "ft": "ft_isprint", "parameters": [ctypes.c_int], "return_value": bool},
    Functions.ISASCII: {"real": "isascii", "ft": "ft_isascii", "parameters": [ctypes.c_int], "return_value": bool},
    Functions.ISALNUM: {"real": "isalnum", "ft": "ft_isalnum", "parameters": [ctypes.c_int], "return_value": bool},
    Functions.ISDIGIT: {"real": "isdigit", "ft": "ft_isdigit", "parameters": [ctypes.c_int], "return_value": bool},
    Functions.ISALPHA: {"real": "isalpha", "ft": "ft_isalpha", "parameters": [ctypes.c_int], "return_value": bool},
    Functions.ATOI: {"real": "atoi", "ft": "ft_atoi", "parameters": [ctypes.c_char_p], "return_value": ctypes.c_int},
    Functions.STRNCMP: {"real": "strncmp", "ft": "ft_strncmp", "parameters": [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int], "return_value": ctypes.c_int},
    Functions.STRCMP: {"real": "strcmp", "ft": "ft_strcmp", "parameters": [ctypes.c_char_p, ctypes.c_char_p], "return_value": ctypes.c_int},
    Functions.STRSTR: {"real": "strstr", "ft": "ft_strstr", "parameters": [ctypes.c_char_p, ctypes.c_char_p], "return_value": ctypes.c_char_p},
    Functions.STRNSTR: {"real": "strnstr", "ft": "ft_strnstr", "parameters": [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_size_t], "return_value": ctypes.c_char_p},

}

test_cases = {
    Functions.TOLOWER: [0, 45, 127, 97, 123, 90, 122],
    Functions.TOUPPER: [0, 45, 127, 97, 123, 90, 122],
    Functions.ISPRINT: [0, 45, 127, 97, 123, 90, 122],
    Functions.ISASCII: [0, 45, 127, 97, 123, 90, 122],
    Functions.ISALNUM: [0, 45, 127, 97, 123, 90, 122],
    Functions.ISDIGIT: [0, 45, 127, 97, 123, 90, 122],
    Functions.ISALPHA: [0, 45, 127, 97, 123, 90, 122],
    Functions.ATOI: [b'hello', b' ', b'-42', b'42', b'+-55', b'\n'],
    Functions.STRNCMP: [
        (b"hello", b"hello", 5),
        (b"hello", b"heLlo", 5),
        (b"hello", b"hello!", 5),
        (b"hello", b"he", 5),
        (b"hello", b"hello", 3),
        (b"abc", b"abd", 2),
        (b"abc", b"abd", 3),
        (b"abc", b"abc", 0),
        (b"abc", b"", 3),
        (b"", b"abc", 3),
        (b"", b"", 1),
        (b"abc\0def", b"abc\0xyz", 7),
    ],
    Functions.STRCMP: [
        (b"hello", b"hello"),
        (b"hello", b"heLlo"),
        (b"hello", b"hello!"),
        (b"hello", b"he"),
        (b"hello", b"hello"),
        (b"abc", b"abd"),
        (b"abc", b"abd"),
        (b"abc", b"abc"),
        (b"abc", b""),
        (b"", b"abc"),
        (b"", b""),
        (b"abc\0def", b"abc\0xyz"),
    ],
    Functions.STRSTR: [
        (b"hello world", b"world"),
        (b"hello world", b""),
        (b"hello world", b"o w"),
        (b"hello", b"hello"),
        (b"abcabcabc", b"bca"),
        (b"abcabcabc", b"cab"),
        (b"abcd", b"e"),
        (b"", b""),
        (b"", b"abc"),
        (b"abc", b"abcd"),
    ],
    Functions.STRNSTR: [
        (b"hello world", b"world", 11),
        (b"hello world", b"world", 5),
        (b"hello world", b"", 11),
        (b"hello world", b"o w", 8),
        (b"hello", b"hello", 5),
        (b"abcabcabc", b"bca", 9),
        (b"abcabcabc", b"cab", 6),
        (b"abcd", b"e", 4),
        (b"", b"", 1),
        (b"", b"abc", 0),
        (b"abc", b"abcd", 4),
    ]

}
